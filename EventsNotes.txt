This is sample server control that illustrate server event handlering:

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace EventControl
{
    [DefaultProperty("Text")]
    [ToolboxData("<{0}:EventControl runat=server></{0}:EventControl>")]
    public class EventControl : WebControl, IPostBackEventHandler
    {
        protected override void RenderContents(HtmlTextWriter writer)
        {
            writer.AddAttribute(HtmlTextWriterAttribute.Style, "width:100px; height:100px; background-color:Red;");
            writer.AddAttribute(HtmlTextWriterAttribute.Id, this.ClientID + "_Red");

            writer.RenderBeginTag(HtmlTextWriterTag.Div);
            writer.RenderEndTag();

            writer.AddAttribute(HtmlTextWriterAttribute.Id, this.ClientID + "_Blue");
            writer.AddAttribute(HtmlTextWriterAttribute.Style, "width:100px; height:100px; background-color:Blue; ");
            writer.RenderBeginTag(HtmlTextWriterTag.Div);
            writer.RenderEndTag();

            writer.AddAttribute(HtmlTextWriterAttribute.Style, "width:100px; height:100px;  text-align: center; background-color:Yellow; ");
            writer.AddAttribute(HtmlTextWriterAttribute.Id, "Hover");
            writer.RenderBeginTag(HtmlTextWriterTag.Div);
            writer.Write("HOVER");
            writer.RenderEndTag();

            base.RenderContents(writer);

        }

        private string clientPostBackScript;
        private string clientPostBackHyperlink;

        private static readonly object EventClickRed = new object();
        private static readonly object EventClickBlue = new object();
        private static readonly object EventMouseHoverIn = new object();
        private static readonly object EventMouseHoverOut = new object();

        public event EventHandler ClickRed
        {
            add
            {
                Events.AddHandler(EventClickRed, value);
            }
            remove
            {
                Events.RemoveHandler(EventClickRed, value);
            }
        }
        public event EventHandler ClickBlue
        {
            add
            {
                Events.AddHandler(EventClickBlue, value);
            }
            remove
            {
                Events.RemoveHandler(EventClickBlue, value);
            }
        }
        public event EventHandler MouseHoverIn
        {
            add
            {
                Events.AddHandler(EventMouseHoverIn, value);
            }
            remove
            {
                Events.RemoveHandler(EventMouseHoverIn, value);
            }
        }
        public event EventHandler MouseHoverOut
        {
            add
            {
                Events.AddHandler(EventMouseHoverOut, value);
            }
            remove
            {
                Events.RemoveHandler(EventMouseHoverOut, value);
            }
        }

        [Category("Action")]
        protected virtual void OnClickRed(EventArgs e)
        {
            EventHandler clickRedHandler = (EventHandler)Events[EventClickRed];
            if (clickRedHandler != null)
            {
                clickRedHandler(this, e);
            }
        }
        [Category("Action")]
        protected virtual void OnClickBlue(EventArgs e)
        {
            EventHandler clickBlueHandler = (EventHandler)Events[EventClickBlue];
            if (clickBlueHandler != null)
            {
                clickBlueHandler(this, e);
            }
        }
        [Category("Action")]
        protected virtual void OnMouseHoverIn(EventArgs e)
        {
            EventHandler eventHandler = (EventHandler)Events[EventMouseHoverIn];
            if (eventHandler != null)
            {
                eventHandler(this, e);
            }

        }
        [Category("Action")]
        protected virtual void OnMouseHoverOut(EventArgs e)
        {
            EventHandler eventHandler = (EventHandler)Events[EventMouseHoverOut];
            if (eventHandler != null)
            {
                eventHandler(this, e);
            }
        }

        protected override void OnPreRender(EventArgs e)
        {
            clientPostBackHyperlink = Page.GetPostBackClientHyperlink(this, string.Empty);
            clientPostBackScript = Page.GetPostBackClientEvent(this, string.Empty);
            base.OnPreRender(e);

        }



        public void RaisePostBackEvent(string eventArgument)
        {

            if (eventArgument == "OnClickRed")
            {
                this.OnClickRed(EventArgs.Empty);
            }
            if (eventArgument == "OnClickBlue")
            {
                this.OnClickBlue(EventArgs.Empty);
            }
            if (eventArgument == "OnMouseHoverIn")
            {
                this.OnMouseHoverIn(EventArgs.Empty);
            }
            if (eventArgument == "OnMouseHoverOut")
            {
                this.OnMouseHoverOut(EventArgs.Empty);
            }
        }
    }

}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Test app
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplication1._Default" %>

<%@ Register Assembly="ServerControl2" Namespace="EventControl" TagPrefix="cc1" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Untitled Page</title>

    <script src="jquery-1.3.2.js" type="text/javascript"></script>

    <script src="jquery-1.3.2-vsdoc.js" type="text/javascript"></script>

    <script type="text/javascript">
        $(document).ready(function Fn()
        {
            $("#" + "<%=EventControl1.ClientID%>" + "_Red").click(function Red()
            {

                //alert("Red");
                __doPostBack("EventControl1", "OnClickRed");
            })

            $("#" + "<%=EventControl1.ClientID%>" + "_Blue").click(function Blue()
            {
                //alert("Blue");
                __doPostBack("EventControl1", "OnClickBlue");

            })
            $("#Hover").hover(function Hover()
            {
                __doPostBack("EventControl1", "OnMouseHoverIn");
                //    debugger
            },
            function Out()
            {
                __doPostBack("EventControl1", "OnMouseHoverOut");
                //  debugger
            })
        });
     

    </script>

</head>
<body>
    <form id="form1" runat="server">
    <div>
        <asp:Label ID="Label2" runat="server" Text="Label"></asp:Label><br />
        <asp:Label ID="Label3" runat="server" Text="Label"></asp:Label><br />
        <asp:Label ID="Label4" runat="server" Text="Label"></asp:Label><br />
        <asp:Label ID="Label1" runat="server" Text="Label"></asp:Label><br />
        <cc1:EventControl ID="EventControl1" runat="server" OnClickBlue="EventControl1_ClickBlue"
            OnClickRed="EventControl1_ClickRed" OnMouseHoverIn="EventControl1_MouseHoverIn"
            OnMouseHoverOut="EventControl1_MouseHoverOut" />
    </div>
    </form>
</body>
</html>


